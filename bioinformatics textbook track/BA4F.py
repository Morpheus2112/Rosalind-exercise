# -*- coding: utf-8 -*-
"""
Created on Wed Mar 14 16:00:10 2018

@author: palan
"""
rna_codon = {'AAA' : 'K', 'AAC' : 'N', 'AAG' : 'K','AAU' : 'N','ACA' : 'T', 'ACC' : 'T', 'ACG' : 'T',
    'ACU' : 'T', 'AGA' : 'R', 'AGC' : 'S', 'AGG' : 'R', 'AGU' : 'S', 'AUA' : 'I', 'AUC' : 'I',
    'AUG' : 'M', 'AUU' : 'I', 'CAA' : 'Q' ,'CAC' : 'H', 'CAG' : 'Q', 'CAU' : 'H', 'CCA' : 'P',
    'CCC' : 'P', 'CCG' : 'P', 'CCU' : 'P', 'CGA' : 'R', 'CGC' : 'R', 'CGG' : 'R', 'CGU' : 'R',
    'CUA' : 'L', 'CUC' : 'L', 'CUG' : 'L', 'CUU' : 'L', 'GAA' : 'E', 'GAC' : 'D', 'GAG' : 'E',
    'GAU' : 'D', 'GCA' : 'A', 'GCC' : 'A', 'GCG' : 'A', 'GCU' : 'A', 'GGA' : 'G', 'GGC' : 'G',
    'GGG' : 'G', 'GGU' : 'G', 'GUA' : 'V', 'GUC' : 'V', 'GUG' : 'V', 'GUU' : 'V', 'UAA' : '-',
    'UAC' : 'Y', 'UAG' : '-', 'UAU' : 'Y', 'UCA' : 'S', 'UCC' : 'S', 'UCG' : 'S', 'UCU' : 'S',
    'UGA' : '-', 'UGC' : 'C', 'UGG' : 'W', 'UGU' : 'C', 'UUA' : 'L', 'UUC' : 'F', 'UUG' : 'L',
    'UUU' : 'F'}

amino_acid_mass = {'G' : 57, 'A' : 71, 'S' : 87, 'P' : 97, 'V' : 99, 'T' : 101, 'C' : 103,
    'I' : 113, 'L' : 113, 'N' : 114, 'D' : 115, 'K' : 128, 'Q' : 128, 'E' : 129,'M' : 131,
    'H' : 137, 'F' : 147, 'R' : 156, 'Y' : 163, 'W' : 186}


def peptide_masses(peptide):
    '''
    convert peptite string to a list of masses
    '''
    global amino_acid_mass
    return map(lambda k:amino_acid_mass[k],list(peptide))

def peptide_mass_spectrum(pmass, cyclic = True):
    ''' 
    convert list of peptide masses to spectrum
    '''
    s = [0, ]
    ll = list(pmass)    
    n = len(pmass)
    it = None
    if cyclic:
        ll.extend(pmass[:-1])
        s.append(sum(pmass))
        it = [(i,j) for i in range(n) for j in range (i+1,i+n)]
    else:
        it = [(i,j) for i in range(n) for j in range (i+1,n+1)]
        
    for (i,j) in it:
            subpeptide_mass = sum(ll[i:j])
            s.append(subpeptide_mass)
    
    return sorted(s)



def get_spectrum(peptide, cyclic = True):
    '''
    Generate the theoretical spectrum of a cyclic peptide.
    '''
    if (type(peptide) == str):
        return peptide_mass_spectrum(peptide_masses(peptide), cyclic)
    else:
        return peptide_mass_spectrum(peptide, cyclic)



def peptide_scoring(peptide, spectrum, cyclic = True):
    '''
    Compute the score of a cyclic peptide against a spectrum.
    '''
    lsp = get_spectrum(peptide, cyclic = cyclic)
    spectrum.sort()
    lsp.sort()
    score = 0
    i = 0
    j = 0
    while i < len(lsp) and j < len(spectrum):
        if (spectrum[j] == lsp[i]):
            j += 1
            i += 1
            score +=1
        elif (spectrum[j] > lsp[i]):
            i += 1
        else:
            j += 1
    return score

#
#p = 'WFEKVEYEHAENVRCSFVTPYQITHHNQWGTTNSN'
#s = '0 71 71 87 97 99 99 99 101 101 101 101 103 113 114 114 114 114 128 128 129 129 129 129 137 137 147 147 147 156 156 163 163 172 186 186 186 198 200 200 200 201 201 202 213 215 227 227 228 234 238 242 243 246 250 250 255 257 259 260 266 266 292 292 294 297 301 302 309 314 314 314 315 316 333 333 342 342 347 351 355 356 358 358 361 363 363 363 364 365 369 389 393 395 397 403 406 413 413 416 422 428 429 438 443 444 460 460 461 464 465 470 472 472 477 490 492 492 493 494 494 496 498 500 505 517 519 536 541 542 544 551 553 558 559 560 561 561 569 571 576 584 589 591 593 597 601 601 606 607 619 622 629 629 647 652 652 657 658 660 662 664 665 672 672 673 678 679 685 689 694 697 698 705 714 728 732 736 743 745 746 748 751 753 754 758 761 766 779 785 786 786 793 798 799 807 808 811 819 826 828 834 835 842 850 850 852 856 857 857 859 861 865 872 873 875 883 895 898 899 900 908 912 925 935 935 949 954 955 956 964 966 966 971 971 971 979 982 985 986 987 987 994 998 1006 1011 1012 1013 1013 1026 1036 1036 1042 1045 1053 1055 1057 1063 1065 1070 1095 1099 1100 1101 1101 1107 1111 1112 1118 1125 1127 1129 1135 1137 1141 1142 1142 1150 1154 1158 1158 1166 1171 1189 1192 1192 1198 1208 1213 1214 1226 1226 1228 1230 1236 1237 1239 1241 1248 1251 1253 1258 1263 1272 1285 1295 1298 1304 1305 1312 1314 1318 1322 1329 1329 1337 1338 1340 1351 1354 1355 1355 1357 1375 1377 1384 1395 1395 1399 1400 1408 1409 1413 1419 1426 1426 1426 1432 1439 1451 1451 1452 1457 1458 1476 1484 1494 1496 1496 1500 1504 1522 1523 1524 1527 1531 1538 1540 1547 1550 1555 1555 1555 1564 1586 1589 1595 1595 1597 1597 1604 1614 1618 1623 1623 1626 1643 1650 1652 1656 1663 1664 1678 1687 1692 1696 1698 1701 1711 1717 1718 1718 1722 1724 1727 1733 1742 1751 1777 1777 1789 1790 1790 1793 1797 1798 1806 1812 1815 1821 1823 1836 1843 1847 1850 1855 1864 1873 1889 1890 1891 1899 1905 1906 1911 1912 1918 1920 1937 1937 1944 1951 1976 1977 1984 1984 1990 1992 1992 1998 2013 2019 2019 2020 2027 2036 2048 2055 2058 2083 2084 2091 2091 2091 2093 2112 2113 2123 2137 2140 2145 2148 2148 2156 2156 2183 2184 2194 2205 2205 2211 2212 2219 2234 2247 2249 2254 2259 2269 2270 2283 2284 2285 2292 2293 2308 2334 2340 2348 2350 2361 2369 2381 2382 2383 2384 2395 2397 2405 2406 2406 2411 2422 2449 2462 2464 2470 2490 2509 2511 2512 2520 2521 2526 2535 2544 2551 2561 2563 2563 2567 2568 2591 2597 2634 2648 2649 2649 2650 2662 2665 2673 2677 2692 2697 2698 2724 2730 2744 2748 2762 2763 2764 2764 2777 2806 2825 2834 2835 2845 2853 2859 2876 2876 2877 2878 2893 2926 2930 2948 2954 2963 2964 2982 2990 3004 3007 3031 3040 3055 3062 3062 3078 3091 3095 3119 3127 3168 3169 3190 3190 3192 3209 3218 3220 3241 3256 3281 3306 3319 3321 3337 3346 3370 3376 3393 3395 3420 3435 3447 3507 3522 3523 3523 3532 3534 3548 3621 3633 3636 3662 3679 3709 3734 3735 3749 3780 3848 3863 3865 3881 3935 3966 3995 4049 4067 4082 4181 4196 4268 4382'

fname = 'rosalind_ba4f.txt'
lines = list(l for l in open(fname))
p = lines[0].strip()
s = lines[1]
ss = map(int,s.split(' '))
    

print peptide_scoring(p, ss, cyclic = True)